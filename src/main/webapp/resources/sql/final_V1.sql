/*******************SEQUENCE***********************/
CREATE SEQUENCE USER_SEQ NOCACHE;
CREATE SEQUENCE ACCESS_HISTORY_SEQ NOCACHE;
CREATE SEQUENCE CENTER_SEQ NOCACHE;
CREATE SEQUENCE CLASS_SEQ NOCACHE;
CREATE SEQUENCE LEFT_USER_SEQ NOCACHE;
CREATE SEQUENCE DOG_SEQ NOCACHE;
CREATE SEQUENCE INVITE_SEQ NOCACHE;
/*******************SEQUENCE***********************/

DROP SEQUENCE DOG_SEQ ;
DROP SEQUENCE LEFT_USER_SEQ ;
DROP SEQUENCE CLASS_SEQ ;
DROP SEQUENCE CENTER_SEQ ;
DROP SEQUENCE ACCESS_HISTORY_SEQ ;
DROP SEQUENCE USER_SEQ ;

DROP TABLE CLASSES;




/************************* 테이블 *************************/
-- 회원정보 테이블 (관리자와 회원 모두 통합)
CREATE TABLE USER_T
(
    USER_ID      NUMBER             NOT NULL,
    NAME         VARCHAR2(60 BYTE)  NOT NULL,
    EMAIL        VARCHAR2(100 BYTE) NOT NULL,
    PHONE_NUM    VARCHAR2(20 BYTE)  NOT NULL,
    USER_NAME    VARCHAR2(60 BYTE)  NOT NULL,
    PW           VARCHAR2(64 BYTE)  NOT NULL,
    USER_TYPE    NUMBER, --관리자일경우 0, 일반회원은 2, 선생님들 1
    SIGNUP_DT    DATE,
    PW_MODIFY_DT DATE,
    CENTER_ID    NUMBER,
    INVITE_ID    VARCHAR2(20 BYTE),
    DOG_NO       NUMBER,
    ACCEPTED     NUMBER, -- 0: no,  1:yes
/* 가입일 */
    AVATAR       VARCHAR2(200 BYTE),
    CONSTRAINT PK_USER PRIMARY KEY (USER_ID),
    CONSTRAINT FK_CENTER FOREIGN KEY (CENTER_ID) REFERENCES DAYCARE (CENTER_ID) ON DELETE CASCADE
);

ALTER TABLE USER_T RENAME COLUMN DOG_ID TO DOG_NO;
ALTER TABLE USER_T DROP CONSTRAINT  FK_DOG;
ALTER TABLE USER_T
    ADD INVITE_ID VARCHAR2(20 BYTE);
ALTER TABLE USER_T
    ADD DOG_ID NUMBER;
ALTER TABLE USER_T
    ADD ACCEPTED     NUMBER;
ALTER TABLE USER_T
    ADD ADDRESS       VARCHAR2(100 BYTE);


ALTER TABLE USER_T
ADD     CONSTRAINT FK_DOG FOREIGN KEY (DOG_ID) REFERENCES DOG_T (DOG_ID);

COMMIT;
SROP TABLE INVITE_T;

CREATE TABLE INVITE_T(
    INVITE_NO    NUMBER NOT NULL,
    INVITE_ID    VARCHAR2(20 BYTE) NOT NULL,
    CENTER_ID    NUMBER NOT NULL,
    EMAIL VARCHAR2(100 BYTE),
    ALIAS  VARCHAR2(60 BYTE),
    CONTACT VARCHAR2(20 BYTE),
    USER_TYPE NUMBER,
    SENDER_ID    NUMBER NOT NULL,
    RECEIVER_ID  NUMBER,
    ACCEPTED     NUMBER, --0:no 1:yes
    CONSTRAINT PK_INVITE PRIMARY KEY (INVITE_NO),
    CONSTRAINT FK_SERDER_ID FOREIGN KEY (SENDER_ID) REFERENCES USER_T (USER_ID),

);
ALTER TABLE INVITE_T
    ADD CENTER_ID NUMBER;
ALTER TABLE INVITE_T
    ADD ALIAS  VARCHAR2(60 BYTE);
ALTER TABLE INVITE_T
    ADD INVITE_NO NUMBER NOT NULL;
ALTER TABLE INVITE_T
    ADD USER_TYPE    NUMBER;
ALTER TABLE INVITE_T DROP FK_RECIEVER_ID
COMMIT;
ALTER TABLE INVITE_T
MODIFY RECEIVER_ID DEFAULT NULL NULL;
COMMIT;

CREATE TABLE DOG_T
(
    DOG_ID        NUMBER             NOT NULL,
    USER_ID       NUMBER             NOT NULL,
    NAME          VARCHAR2(60 BYTE)  NOT NULL,
    PARENT1_NAME  VARCHAR2(60 BYTE)  NOT NULL,
    PARENT2_NAME  VARCHAR2(60 BYTE)  NOT NULL,
    PARENT1_PHONE VARCHAR2(20 BYTE)  NOT NULL,
    PARENT2_PHONE VARCHAR2(20 BYTE)  NOT NULL,
    ADDRESS       VARCHAR2(100 BYTE) NOT NULL,
    BREED         VARCHAR2(60 BYTE),
    WEIGHT        NUMBER             NOT NULL,
    BIRTHDAY      VARCHAR2(20 BYTE)  NOT NULL,
    AVATAR       VARCHAR2(200 BYTE),
    CLASSES       VARCHAR2(20 BYTE)  NOT NULL,
    CONSTRAINT PK_DOG PRIMARY KEY (DOG_ID),
    CONSTRAINT FK_FAMILY_ID FOREIGN KEY (USER_ID) REFERENCES USER_T (USER_ID)
);

ALTER TABLE DOG_T ADD USER_ID NUMBER NOT NULL;
ALTER TABLE DOG_T ADD CONSTRAINT FK_FAMILY_ID FOREIGN KEY (USER_ID) REFERENCES USER_T (USER_ID);
COMMIT;

--     ALBUM_ID      NUMBER             NOT NULL,
--     NOTE_ID       NUMBER             NOT NULL,
--     MED_ID        NUMBER             NOT NULL,
--     DOC_ID        NUMBER             NOT NULL,
--     DIET_ID       NUMBER             NOT NULL,
-- CREATE TABLE ALBUM_T(
--     ALBUM_ID
-- )

CREATE TABLE MULTI_DOG(
    USER_ID NUMBER NOT NULL,
    DOG_ID NUMBER NOT NULL,
    CONSTRAINT PK_USER_DOG PRIMARY KEY (USER_ID, DOG_ID),
    CONSTRAINT FK_MULTIDOG FOREIGN KEY (DOG_ID) REFERENCES DOG_T (DOG_ID),
    CONSTRAINT FK_PARENT FOREIGN KEY (USER_ID) REFERENCES USER_T (USER_ID)
);

DROP SEQUENCE CENTER_SEQ;
DROP TABLE MULTI_DOG;

CREATE TABLE DAYCARE
(
    CENTER_ID        NUMBER             NOT NULL,
    CENTER_ADDRESS   VARCHAR2(100 BYTE) NOT NULL,
    CENTER_NAME      VARCHAR2(60 BYTE),
    CENTER_PHONE_NUM VARCHAR2(20 BYTE),
    CENTER_LOGO      VARCHAR2(200 BYTE),
    --DATE MAYBE?--
    CONSTRAINT PK_DAYCARE PRIMARY KEY (CENTER_ID)
);



CREATE TABLE CLASSES
(
    CLASS_ID   NUMBER NOT NULL,
    CLASS_NAME VARCHAR(20 BYTE),
    DAY        NUMBER, --1 monday 2 tues, - 7: sunday
    START_TIME VARCHAR2(60 BYTE),
    END_TIME   VARCHAR2(60 BYTE),
    CATEGORY   NUMBER, --0은 주말 1은 평일
    TEACHER_ID NUMBER NOT NULL,
    CENTER_ID   NUMBER NOT NULL,
    CONSTRAINT PK_CLASS PRIMARY KEY (CLASS_ID),
    CONSTRAINT FK_TEACHER FOREIGN KEY (TEACHER_ID) REFERENCES USER_T (USER_ID) ON DELETE CASCADE,
    CONSTRAINT FK_CLASS_CENTER FOREIGN KEY (CENTER_ID) REFERENCES DAYCARE (CENTER_ID) ON DELETE CASCADE
);

COMMIT;

-- CREATE TABLE PRICE_T(
--
-- )


-- CREATE TABLE DAYCARE_ADMINS(
--                                CENTER_ID NUMBER NOT NULL,
--                                USER_ID   NUMBER NOT NULL,
--                                CONSTRAINT PK_CENTER_ADMIN PRIMARY KEY (CENTER_ID, USER_ID),
--                                CONSTRAINT FK_CENTER FOREIGN KEY (CENTER_ID) REFERENCES DAYCARE(CENTER_ID),
--                                CONSTRAINT FK_ADMIN FOREIGN KEY (USER_ID) REFERENCES  USER_T(USER_ID)
-- );

-- CREATE TABLE PARENT_DETAIL(
--                             USER_ID             NUMBER NOT NULL,
--                             USER_TYPE           NUMBER NOT NULL,
--                             PARENT_NAME         VARCHAR2(100 BYTE),
--                             DOG_NAME          VARCHAR2(100 BYTE),
--                             PW_MODIFY_DT       DATE,
--                             SIGNUP_DT          DATE,
--                             ADDRESS           VARCHAR2(100 BYTE),
--                             PHONE_NUM          VARCHAR2(20 BYTE),
--                             EMERGENCY_NUM          VARCHAR2(20 BYTE),
--                             BIO                VARCHAR2(300 BYTE),
--                             JOB_TITLE          VARCHAR2(100 BYTE),
--                             BIRTHDAY           DATE,
--                             INSTAGRAM_URL      VARCHAR2(100 BYTE),
--                             LINKEDIN_URL       VARCHAR2(100 BYTE),
--                             GITHUB_URL         VARCHAR2(100 BYTE),
--                             CONSTRAINT PK_F_USER PRIMARY KEY(USER_ID),
--                             CONSTRAINT  FK_USER FOREIGN KEY (USER_ID)
--                             REFERENCES USER_T (USER_ID) ON DELETE CASCADE,
--                             CONSTRAINT FK_NAME FOREIGN KEY (DOG_NAME)
--                             REFERENCES  USER_T (USER_NAME) ON DELETE CASCADE
-- );


-- 접속 기록
CREATE TABLE ACCESS_HISTORY_T
(
    ACCESS_HISTORY_ID NUMBER NOT NULL,
    USER_ID           NUMBER NOT NULL,
    IP                VARCHAR2(50 BYTE),
    USER_AGENT        VARCHAR2(150 BYTE),
    SESSION_ID        VARCHAR2(32 BYTE),
    SIGNIN_DT         DATE,
    SIGNOUT_DT        DATE,
    CONSTRAINT PK_ACCESS_HISTORY PRIMARY KEY (ACCESS_HISTORY_ID),
    CONSTRAINT FK_ACCESS_HISTORY_USER FOREIGN KEY (USER_ID)
        REFERENCES USER_T (USER_ID) ON DELETE CASCADE
);

-- 탈퇴 회원
CREATE TABLE LEFT_USER_T
(
    LEFT_USER_ID NUMBER             NOT NULL,
    EMAIL        VARCHAR2(100 BYTE) NOT NULL UNIQUE,
    LEAVE_DT     DATE,
    CONSTRAINT PK_LEAVE_USER PRIMARY KEY (LEFT_USER_ID)
);

CREATE OR REPLACE TRIGGER LEFT_TRIGGER
    AFTER
        DELETE
    ON USER_T
    FOR EACH ROW
BEGIN
    INSERT INTO LEFT_USER_T( LEFT_USER_ID
                           , EMAIL
                           , LEAVE_DT)
    VALUES ( LEFT_USER_SEQ.NEXTVAL
           , OLD.EMAIL
           , CURRENT_DATE);
    -- COMMIT;  트리거 내에서는 오류가 있으면 ROLLBACK, 없으면 COMMIT 자동 처리
END;


















